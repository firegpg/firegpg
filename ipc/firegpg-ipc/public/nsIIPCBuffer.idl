/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "MPL"); you may not use this file
 * except in compliance with the MPL. You may obtain a copy of
 * the MPL at http://www.mozilla.org/MPL/
 *
 * Software distributed under the MPL is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the MPL for the specific language governing
 * rights and limitations under the MPL.
 *
 * The Original Code is protoZilla.
 *
 * The Initial Developer of the Original Code is Ramalingam Saravanan.
 * Portions created by Ramalingam Saravanan <svn@xmlterm.org> are
 * Copyright (C) 2000 Ramalingam Saravanan. All Rights Reserved.
 *
 * Contributor(s):
 * Patrick Brunschwig <patrick@mozilla-enigmail.org>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 * ***** END LICENSE BLOCK ***** */

#include "nsIPipeListener.idl"

interface nsIURI;
interface nsIRunnable;
interface nsIRequestObserver;

%{C++
#define NS_IPCBUFFER_CLASSNAME "IPC Buffer"
#define NS_IPCBUFFER_CONTRACTID "@getfiregpg.org/ipc/ipc-buffer;1"

#define NS_IPCBUFFER_CID                         \
{ /* babce0c1-7ab1-11d4-8f02-a06008948af5 */     \
   0xbabce0c1, 0x7ab1, 0x11d4,                   \
{0x8f, 0x02, 0xa0, 0x60, 0x08, 0x94, 0x8a, 0xf5} }

%}

/* nsIIPCBuffer is an interface to a byte buffer.
 * It is thread-safe, i.e.,it may be called from any thread. It uses a
 * monitor to ensure data integrity.
 */

[scriptable, uuid(babce0c0-7ab1-11d4-8f02-a06008948af5)]
interface nsIIPCBuffer : nsIPipeListener
{
  /**
   * Opens byte buffer
   *
   * @param maxBytes      maximum number of bytes to be read
   *                      (maxBytes <= 0  --> unlimited buffer size)
   * @param overflowFile  determines if a temporary file should be created
   *                      if the data to hold in the buffer grows larger than
   *                      maxBytes. If false and the buffer reached maxBytes
   *                      then reading will block until data is read from the
   *                      buffer.
   */

  void open(in long maxBytes, in boolean overflowFile);

  /**
   * Loads an URI into the console buffer (use instead of the open method)
   *
   * @param aURI          URI to be loaded
   * @param maxBytes      maximum number of bytes to be read
   *                      (maxBytes <= 0  --> unlimited buffer size)
   * @param synchronous   determines whether to load synchronously
   *                      (NOTE: This DOESN'T WORK if the input stream operates
   *                      on the same thread -- reading and writing are
   *                      both blocking operations)
   * @param observer      a request observer (same as if defined via observe())
   * @param ctxt          opaque parameter passed to listener methods
   * @param overflowFile  determines if a temporary file should be created
   *                      (see open() for details)
   */
  void openURI(in nsIURI aURI,
               in long maxBytes,
               in boolean synchronous,
               in nsIRequestObserver observer,
               in nsISupports ctxt,
               in boolean overflowFile);

  /**
   * Opens an input stream to access buffer data;
   * should be called only after the OnStopRequest call to streamListener.
   * Note: On closing the stream, the buffer will be cleared
   */
  nsIInputStream openInputStream();

  /**
   * Returns data from buffer
   * (as a NUL-terminated string)
   */
  string getData();

  /**
   * True if onStopRequest method of StreamListener has been invoked
   */
  readonly attribute boolean stopped;

  /**
   * Count of total bytes in buffer (or overflow file)
   */
  readonly attribute unsigned long totalBytes;
};


///////////////////////////////////////////////////////////////////////////////
